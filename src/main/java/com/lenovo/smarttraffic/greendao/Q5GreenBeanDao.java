package com.lenovo.smarttraffic.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lenovo.smarttraffic.bean.Q5GreenBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Q5_GREEN_BEAN".
*/
public class Q5GreenBeanDao extends AbstractDao<Q5GreenBean, Long> {

    public static final String TABLENAME = "Q5_GREEN_BEAN";

    /**
     * Properties of entity Q5GreenBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Wendu = new Property(1, int.class, "wendu", false, "WENDU");
        public final static Property Shidu = new Property(2, int.class, "shidu", false, "SHIDU");
        public final static Property Guangzhao = new Property(3, int.class, "guangzhao", false, "GUANGZHAO");
        public final static Property Cq2 = new Property(4, int.class, "cq2", false, "CQ2");
        public final static Property Pm = new Property(5, int.class, "pm", false, "PM");
        public final static Property TfStatus = new Property(6, int.class, "tfStatus", false, "TF_STATUS");
        public final static Property Date = new Property(7, java.util.Date.class, "date", false, "DATE");
    }


    public Q5GreenBeanDao(DaoConfig config) {
        super(config);
    }
    
    public Q5GreenBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Q5_GREEN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WENDU\" INTEGER NOT NULL ," + // 1: wendu
                "\"SHIDU\" INTEGER NOT NULL ," + // 2: shidu
                "\"GUANGZHAO\" INTEGER NOT NULL ," + // 3: guangzhao
                "\"CQ2\" INTEGER NOT NULL ," + // 4: cq2
                "\"PM\" INTEGER NOT NULL ," + // 5: pm
                "\"TF_STATUS\" INTEGER NOT NULL ," + // 6: tfStatus
                "\"DATE\" INTEGER);"); // 7: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Q5_GREEN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Q5GreenBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getWendu());
        stmt.bindLong(3, entity.getShidu());
        stmt.bindLong(4, entity.getGuangzhao());
        stmt.bindLong(5, entity.getCq2());
        stmt.bindLong(6, entity.getPm());
        stmt.bindLong(7, entity.getTfStatus());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Q5GreenBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getWendu());
        stmt.bindLong(3, entity.getShidu());
        stmt.bindLong(4, entity.getGuangzhao());
        stmt.bindLong(5, entity.getCq2());
        stmt.bindLong(6, entity.getPm());
        stmt.bindLong(7, entity.getTfStatus());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Q5GreenBean readEntity(Cursor cursor, int offset) {
        Q5GreenBean entity = new Q5GreenBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // wendu
            cursor.getInt(offset + 2), // shidu
            cursor.getInt(offset + 3), // guangzhao
            cursor.getInt(offset + 4), // cq2
            cursor.getInt(offset + 5), // pm
            cursor.getInt(offset + 6), // tfStatus
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Q5GreenBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWendu(cursor.getInt(offset + 1));
        entity.setShidu(cursor.getInt(offset + 2));
        entity.setGuangzhao(cursor.getInt(offset + 3));
        entity.setCq2(cursor.getInt(offset + 4));
        entity.setPm(cursor.getInt(offset + 5));
        entity.setTfStatus(cursor.getInt(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Q5GreenBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Q5GreenBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Q5GreenBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
